        Write a python program to implement K-Means clustering Algorithm. 

import numpy as np

class KMeans:
    def __init__(self, n_clusters, max_iter=300):
        self.n_clusters = n_clusters
        self.max_iter = max_iter

    def fit(self, X):
        # Initialize centroids randomly
        self.centroids = X[np.random.choice(X.shape[0], self.n_clusters, replace=False)]

        for _ in range(self.max_iter):
            # Assign each data point to the nearest centroid
            labels = self._assign_clusters(X)

            # Update centroids based on the mean of data points in each cluster
            new_centroids = self._update_centroids(X, labels)

            # Check for convergence
            if np.all(self.centroids == new_centroids):
                break
            
            self.centroids = new_centroids

    def _assign_clusters(self, X):
        distances = np.sqrt(((X - self.centroids[:, np.newaxis])**2).sum(axis=2))
        return np.argmin(distances, axis=0)

    def _update_centroids(self, X, labels):
        new_centroids = np.zeros_like(self.centroids)

        for i in range(self.n_clusters):
            cluster_points = X[labels == i]
            if len(cluster_points) > 0:
                new_centroids[i] = cluster_points.mean(axis=0)
            else:
                # If no points belong to a cluster, keep the centroid unchanged
                new_centroids[i] = self.centroids[i]

        return new_centroids

# Example usage:
if __name__ == "__main__":
    # Generate sample data
    np.random.seed(42)
    X = np.random.randn(100, 2)

    # Define number of clusters
    k = 3

    # Instantiate and fit KMeans
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(X)

    # Get cluster labels
    labels = kmeans._assign_clusters(X)

    # Print cluster centroids and labels
    print("Cluster Centroids:")
    print(kmeans.centroids)
    print("\nCluster Labels:")
    print(labels)
